import re
import subprocess
import os
import os.path

def faSize(path):
    for filename in os.listdir(path):
        if os.path.splitext(filename)[1] == '.fa':
            with open(path+"/"+os.path.splitext(filename)[0]+".size", "w+") as f:
                faToSize = subprocess.Popen(['faSize','-detailed',path+"/"+filename],stdout=f)
                faToSize.wait()
def faTwoBit(path):
    for filename in os.listdir(path):
        if os.path.splitext(filename)[1] == '.fa':
            faToTwoBit = subprocess.Popen(['faToTwoBit',path+"/"+filename,path+"/"+filename+".2bit"])
            faToTwoBit.wait()

def gffRemoveRNA(inGff,outGff):
    f = open(inGff,"r")
    f1 = open(outGff,"w")
    lines=f.readlines()
    for l in lines:
#        l=l.rstrip("\n")
        if l.find("mRNA")!=-1:
            pass
        else:
            f1.write(l)
            
            
        

def sizeToBed(size,refGenome):
    f=open(size,"r")
    path = os.path.splitext(size)[0]
    lines=f.readlines()
    bed=open(path+".bed",'w')
    for l in lines:
        l=l.rstrip("\n")
        arr=l.split("\t")
        out=arr[0]+"\t0\t"+arr[1]+"\n"
        bed.write(out)
    bed.close()

def readSize(ChromSizes):
        f=open(ChromSizes,"r")
        lines=f.readlines()
        size={}
        for l in lines:
                l=l.rstrip("\n")
                arr=l.split("\t")
                size[arr[0]]=arr[1]
        return size
        f.close()

def gffToPsl(gff,qChromSize,rChromSize):
        qChromSizes=readSize(qChromSize)
        rChromSizes=readSize(rChromSize)
        f=open(gff,"r")
        psl=open(gff+".psl",'w')
        lines=f.readlines()
        count=0
        for l in lines:
                l=l.rstrip("\n")
                arr=l.split("\t")
                count+=1
                if l.find("mRNA")!=-1:
                        blockSizes=list()
                        blockCount=0
                        tBaseInsert=0
                        tStarts=list()
                        qStarts=list()
                        blockEnd=list()
                        tName=arr[0]
                        qName=re.search(r'ID=([^;]+);',arr[-1]).group(1)
                        strand=arr[6]
                        tStart=int(arr[3])-1
                        tEnd=arr[4]
                else:
                        tStarts.append(str(int(arr[3])-1)+",")
                        blockSizes.append(int(arr[4])-int(arr[3])+1)
                        blockEnd.append(arr[4])
                        blockCount+=1
                        if len(blockEnd)>1:
                                tBaseInsert+=int(arr[3])-int(blockEnd[-2])+1
                        if len(blockSizes)>1:
                                qStarts.append(str(sum(blockSizes[:-1]))+",")
                        else:
                                qStarts.append("0,")
                        if count==len(lines) or lines[count].find("mRNA")!=-1:
                                blockSizes = [str(x) for x in blockSizes]
#                                print str(qChromSizes[qName])
                                output=str(qChromSizes[qName])+"\t"+str(0)+"\t"  \
                                        +str(0)+"\t"+str(0)+"\t"+str(0)+"\t"+str(0)+"\t" \
                                        +str(blockCount-1)+"\t" \
                                       +str(tBaseInsert)+"\t"+strand+"\t"+qName+"\t"+str(qChromSizes[qName])+"\t"   \
                                       +str(0)+"\t"   \
                                       +str(qChromSizes[qName])+"\t"+tName+"\t"+str(rChromSizes[tName])+"\t" \
                                       +str(tStart)+"\t"+str(tEnd)+"\t"+str(blockCount)+"\t"+",".join(blockSizes)+","+ \
                                       "\t"+"".join(qStarts)+"\t"+"".join(tStarts)+"\n"
                                psl.write(output)
                                       
        f.close()
        psl.close()
